name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Build targets for macOS. We include both arm64 and x64 targets here.
          - platform: 'macos-latest' 
            args: '--target aarch64-apple-darwin' # Builds for M1/M2/M3
          # Linux build
          - platform: 'ubuntu-22.04'
            args: ''
          # Windows build
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # These dependencies are required for building on Linux (specifically for WebKit and AppImages)
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Setup Bun, which will be used for package management and building the frontend.
      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Bun Cache
        uses: actions/cache@v4
        with:
          # Cache location for Bun dependencies
          path: |
            ~/.bun/install/cache
            ./src/.next/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Frontend Dependencies
        # This installs all packages defined in package.json in the src folder
        working-directory: ./src
        run: bun install

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Conditionally install required targets for macOS cross-compilation
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          # Cache Rust build artifacts for speed
          # The workspace is set to the src-tauri folder to capture cargo/target dependencies
          # Adjust if src-tauri is not in the root
          workspaces: './src-tauri -> target'

      # CRITICAL STEP: Build the web assets so Tauri can find them in the distDir
      - name: Build Frontend Assets
        working-directory: ./src
        run: bun run build
        # Building Next.js application in the src directory

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The action automatically replaces __VERSION__ with the version from tauri.conf.json
          tagName: app-v__VERSION__ 
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
