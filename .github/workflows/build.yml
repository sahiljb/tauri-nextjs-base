name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Build targets for macOS. We include both arm64 and x64 targets here.
          - platform: 'macos-latest' 
            args: '--target aarch64-apple-darwin' # Builds for M1/M2/M3
          # Linux build
          - platform: 'ubuntu-22.04'
            args: ''
          # Windows build
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # These dependencies are required for building on Linux (specifically for WebKit and AppImages)
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Setup Bun, which will be used for package management and building the frontend.
      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Bun Cache
        uses: actions/cache@v4
        with:
          # Cache location for Bun dependencies
          path: |
            ~/.bun/install/cache
            ./src/.next/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Frontend Dependencies
        # This installs all packages defined in package.json in the src folder
        working-directory: ./src
        run: bun install

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Conditionally install required targets for macOS cross-compilation
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          # Cache Rust build artifacts for speed
          # The workspace is set to the src-tauri folder to capture cargo/target dependencies
          # Adjust if src-tauri is not in the root
          workspaces: './src-tauri -> target'

      - name: Install Tauri CLI (Unix)
        if: runner.os != 'Windows'
        run: |
          cargo install tauri-cli --locked
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Tauri CLI (Windows)
        if: runner.os == 'Windows'
        run: |
          cargo install tauri-cli --locked
          echo "$HOME/.cargo/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # Build the Next.js frontend
      - name: Build Frontend Assets
        working-directory: ./src
        run: |
          echo "Building Next.js application..."
          bun run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      # Verify build output
      - name: Verify Build Output
        shell: bash
        run: |
          if [ -d "src/.next" ]; then
            echo "Next.js build successful"
          else
            echo "Next.js build failed - .next directory not found"
            exit 1
          fi

      # Import Apple certificate for macOS builds
      - name: Import Apple Certificate
        if: matrix.platform == 'macos-latest' && env.APPLE_CERTIFICATE != ''
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          rm certificate.p12

      # Build Tauri application
      - name: Build Tauri App
        shell: bash
        run: |
          cd src-tauri
          if [ "$RUNNER_OS" = "macOS" ] && [ -z "$APPLE_CERTIFICATE" ]; then
            echo "Building without code signing..."
            cargo tauri build ${{ matrix.args }} --target aarch64-apple-darwin --no-sign
          else
            cargo tauri build ${{ matrix.args }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/msi/*.msi
          token: ${{ secrets.GITHUB_TOKEN }}
